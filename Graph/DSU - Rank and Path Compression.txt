
Path Compression: When performing the Find operation, this optimization flattens the tree structure by making each node point directly to the root. This makes subsequent operations faster.
Union by Rank/Size: When performing the Union operation, this optimization ensures that the smaller tree is always attached to the root of the larger tree, keeping the overall tree height minimal.

int find (int i, vector<int>& parent)
{
     if(i == parent[i])
       return i;
 
      return parent[i] = find(parent[i], parent); // path compression by directly assign the main parent to parent[i].
}

here x and y are the sets, we have to do the union of x and y and here the rank vector is that which tells has which is parent or which has the most set connected to it.
void union(int x, int y, vector<int>& parent, vector<int>& rank)
{
     int x_parent = find(x, parent);
     int y_parent = find(y, parent);

      if(x_parent == y_parent) return;

      if(rank[x_parent] > rank[y_parent])
      {
           parent[y_parent] = x_parent;
      }
      else if(rank[y_parent] > rank[x_parent])
      {
            parent[x_parent] = y_parent;
      }
      else // rank[y_parent] == rank[x_parent], mark any of the following as parent;
      {
            parent[x_parent] = y_parent;
            rank[y_parent] += 1; // if we take x_parent as parent then we will increment the rank[x_parent];
      }
}
